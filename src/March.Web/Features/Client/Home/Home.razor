<article class="prose lg:prose-xl">

    <h1 class="text-2xl font-bold">A no-nonsense approach to creating Server-Side-Rendered web applications.</h1>
    
    <br />

    <p>
        <b>MARCH</b> is a <i>project template</i> for creating interactive
        Server-Side Rendered web applications. The project architecture is based on the concept of HATEOAS 
        <i>(hypermedia as the engine of application state)</i>
        and MARCH implements this with .NET Minimal APIs, Razor Components and HTMX.
    </p>

    <br />

    <p>
        <b class="text-orange-500 dark:text-orange-200">Minimal API's</b> offer a slim and compact framework for creating HTTP services.
        With Minimal APIs, you can quickly spin up endpoints, handle requests, and return responses
        without the need for complex boilerplate code. With <b>ASP.NET Core Web Api</b> as the backend framework,
        you can take full advantage of the robust <b>.NET ecosystem</b>,
        with essential backend services like dependency injection, middleware,
        authentication/authorization, ORMs etc.
    </p>

    <br />

    <p>
        <b class="text-teal-500">Razor Components</b> act as the HTML templating engine. They bring the power of 
        component-based development to .NET and enables building reusable, encapsulated UI 
        components.
        By mixing <b>C#</b> and <b>HTML</b> together, Razor Components integrate perfectly 
        with the .NET backend code..
    </p>

    <br />

    <p>
        <b class="text-violet-300">HTMX</b> brings interactivity to the server-side rendered content 
        without the need for heavy client-side frameworks. 
        HTMX extends standard HTML with custom attributes, enabling actions like 
        HTTP requests, form submissions, and partial page updates. 
        By augmenting your <b>Razor Components</b> with HTMX attributes and 
        communicating with <b>ASP.NET Core Minimal APIs</b>, HTMX keeps the front end interactive 
        without full page reloads, making it an ideal 
        choice for lightweight and responsive web applications.
    </p>

    <br />

    <p>
        For <b>CSS styling</b>, you can simply bring in your own favorite CSS framework, 
        whether it's <span class="text-gray-500 dark:text-pink-300">Tailwind CSS</span>, 
        <span class="text-orange-500 dark:text-orange-300">Bootstrap</span> or your custom CSS library.
    </p>
</article>