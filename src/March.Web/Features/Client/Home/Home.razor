<p class="subtitle is-4">No-nonsense approach to creating Server-Side-Rendered web applications</p>

<p>
    <span><img src="./img/logo_c_sharp.png" style="width:10%;height:10%;border-radius:20px;" /></span>
    <b>Minimal APIs</b> offer a lightweight, high-performance framework for creating HTTP services in .NET.
    With Minimal APIs, you can quickly spin up endpoints, handle requests, and return responses 
    without the need for complex boilerplate code.

    <br />
    <br />

    With <b>.NET as the backend for HTMX</b>, you can take full advantage of the robust .NET ecosystem,
    which handles a range of essential services like authentication, data access, and dependency injection,
    all built-in to streamline backend development. The combination of Minimal APIs and HTMX makes building
    dynamic and responsive web applications a seamless experience.

    <hr />

    <b>Razor Components</b> bring the power of component-based development to .NET,
    enabling developers to build reusable, encapsulated UI components with ease. 

    <br />
    <br />

    <b>Razor Components</b> further enhance this by acting as dynamic HTML templates that can easily interact
    with your server-side logic. This enables you to create rich user interfaces that react to changes in data
    without full-page reloads, allowing for a highly responsive, interactive web experience.
    Razor Components provide a bridge between server-rendered HTML and client-side interactivity
    without the overhead of a full client-side framework.

    <hr />

    <span><img src="./img/htmx_logo.png" style="width:20%;height:20%;border-radius:20px;" /></span>
    <br />
    <b>HTMX</b> is a lightweight JavaScript library that allows you to create dynamic,
    modern web applications without relying on heavy client-side frameworks.

    <hr />

    For <b>styling</b>, you can integrate your favorite CSS framework, whether it's Tailwind CSS, Bootstrap, or a custom solution,
    to style Razor components and bring consistency and modern design to your application.
    This empowers developers to focus on functionality without sacrificing visual polish or accessibility.
</p>
