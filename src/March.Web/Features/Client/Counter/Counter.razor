<div id="counter">

    <p class="title is-4">Counter</p>
    <p class="subtitle is-5">Increase or decrease the value to see validation messages.</p>

    <div class="is-flex is-flex-direction-row is-align-items-center">
        <button class="button is-medium" 
                hx-post="counter/decrement"
                hx-trigger="click"
                hx-target="#counter"
                hx-swap="outerHTML"
                hx-ext='json-enc'
                hx-vals='@((Model with { Count = Model.Count - 1 }).ToJson())'>
            <span class="icon is-medium">
                <i class="fas fa-arrow-left"></i>
            </span>
        </button>
        <div class="p-3">
            <span class="title is-2">
                @Model.Count
            </span>
        </div>
        <button class="button is-medium"
                hx-post="counter/increment"
                hx-trigger="click"
                hx-target="#counter"
                hx-swap="outerHTML"
                hx-ext='json-enc'
                hx-vals='@((Model with { Count = Model.Count + 1 }).ToJson())'>
            <span class="icon is-medium">
                <i class="fas fa-arrow-right"></i>
            </span>
        </button>
    </div>
    @if (ValidationContext.Errors.Any(e => e.PropertyName == nameof(Model.Count)))
    {
        <p class="has-text-danger">@ValidationContext.ValidationResults.Errors.First(
            e => e.PropertyName == nameof(Model.Count)).ErrorMessage
        </p>
    }
</div>

@code
{
    [Inject] public ValidationContext ValidationContext { get; set; } = new();

    [Parameter] public CounterModel Model { get; set; } = new();

    public record CounterModel
    {
        public int Count { get; set; }
        public bool IsIncrement { get; set; }
        public string ToJson() => JsonSerializer.Serialize(this);
    }
}