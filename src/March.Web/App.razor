<div class="flex flex-col min-h-screen">
    <!-- Navigation Bar -->
    <NavBar />

    <!-- Main Content Area -->
    <section class="flex-grow py-24">
        <div class="max-w-screen-lg mx-auto">
            <div class="flex flex-col md:flex-row">
                <!-- Side Navigation Items -->
                <nav class="w-full md:w-1/5">
                    <NavItems />
                </nav>

                <!-- Main Content Area -->
                <div class="w-full md:w-4/5">
                    <div class="p-8">
                        <Hero />
                    </div>
                    <div class="p-12" id="mainContentArea" hx-get="@CurrentRoute" hx-trigger="load">
                        <!-- Swap content here with HTMX -->
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer class="w-full py-4">
        <!-- Added w-full to ensure it takes the full width -->
        <div class="flex justify-center text-center">
            <p>
                Diego Rönkkömäki-Tapia &copy; All rights reserved.
            </p>
        </div>
    </footer>
</div>

@code {
    [Inject] public NavigationManager? NavigationManager { get; set; }

    [Inject] public IHttpContextAccessor? HttpContextAccessor { get; set; }

    [Inject] public EndpointDataSource? EndpointDataSource { get; set; }

    private string CurrentRoute = string.Empty;

    private static List<string> ValidRoutes = [];

    protected override void OnInitialized()
    {
        ValidRoutes = EndpointDataSource?.Endpoints
            .OfType<RouteEndpoint>()
            .Where(endpoint => !string.IsNullOrWhiteSpace(endpoint.RoutePattern.RawText))
            .Select(endpoint => endpoint.RoutePattern.RawText!)
            .ToList() ?? [];

        var request = HttpContextAccessor?.HttpContext?.Request;
        var requestCurrentUrl = request?.Headers["hx-current-url"].ToString() ?? string.Empty;
        var requestedRoute = "/" + requestCurrentUrl.Replace(NavigationManager!.BaseUri, string.Empty);

        CurrentRoute = requestedRoute switch
        {
            "" or "/" => "/home",
            _ when !ValidRoutes.Contains(requestedRoute) => "/notfound",
            _ => requestedRoute
        };
    }
}